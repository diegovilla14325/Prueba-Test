// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Repositories;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Company.DTOs.ProductDTO", b =>
                {
                    b.Property<int>("idProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nombreProducto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("precio")
                        .HasColumnType("double");

                    b.HasKey("idProducto");

                    b.ToTable("ProductDTOs");
                });

            modelBuilder.Entity("Domain.Entities.Company.Point", b =>
                {
                    b.Property<int>("idPuntos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.HasKey("idPuntos");

                    b.HasIndex("IdUsuario");

                    b.ToTable("puntos");
                });

            modelBuilder.Entity("Domain.Entities.Company.Product", b =>
                {
                    b.Property<int>("idProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("nombreProducto")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("precio")
                        .HasColumnType("double");

                    b.HasKey("idProducto");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("Domain.Entities.Company.Reward", b =>
                {
                    b.Property<int>("idPremio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ValorEnPuntos")
                        .HasColumnType("int");

                    b.Property<string>("nombrePremio")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idPremio");

                    b.ToTable("premios");
                });

            modelBuilder.Entity("Domain.Entities.Company.RewardLog", b =>
                {
                    b.Property<int>("idPremioCanjeado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaCanje")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idPremio")
                        .HasColumnType("int");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("idPremioCanjeado");

                    b.HasIndex("idPremio");

                    b.HasIndex("idUsuario");

                    b.ToTable("premioscanjeados");
                });

            modelBuilder.Entity("Domain.Entities.Company.Transaction", b =>
                {
                    b.Property<int>("idCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("TotalCompra")
                        .HasColumnType("double");

                    b.Property<DateTime>("fechaCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("idCompra");

                    b.HasIndex("idUsuario");

                    b.ToTable("comprasrealizadas");
                });

            modelBuilder.Entity("Domain.Entities.Company.TransactionLog", b =>
                {
                    b.Property<int>("idDetalleCOmpra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idCompra")
                        .HasColumnType("int");

                    b.Property<int>("idProducto")
                        .HasColumnType("int");

                    b.Property<double>("precio")
                        .HasColumnType("double");

                    b.HasKey("idDetalleCOmpra");

                    b.HasIndex("idCompra");

                    b.HasIndex("idProducto");

                    b.ToTable("detallescomprasrealizadas");
                });

            modelBuilder.Entity("Domain.Entities.Security.User", b =>
                {
                    b.Property<int>("idUsario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("contraseña")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("diaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("nombreUsuario")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idUsario");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Domain.Entities.Company.Point", b =>
                {
                    b.HasOne("Domain.Entities.Security.User", "users")
                        .WithMany("points")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Domain.Entities.Company.RewardLog", b =>
                {
                    b.HasOne("Domain.Entities.Company.Reward", "rewards")
                        .WithMany("rewardLogs")
                        .HasForeignKey("idPremio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Security.User", "users")
                        .WithMany("rewardLogs")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rewards");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Domain.Entities.Company.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.Security.User", "users")
                        .WithMany("transactions")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("Domain.Entities.Company.TransactionLog", b =>
                {
                    b.HasOne("Domain.Entities.Company.Transaction", "transactions")
                        .WithMany("transactionLogs")
                        .HasForeignKey("idCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Company.Product", "products")
                        .WithMany("transactionLogs")
                        .HasForeignKey("idProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("products");

                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Domain.Entities.Company.Product", b =>
                {
                    b.Navigation("transactionLogs");
                });

            modelBuilder.Entity("Domain.Entities.Company.Reward", b =>
                {
                    b.Navigation("rewardLogs");
                });

            modelBuilder.Entity("Domain.Entities.Company.Transaction", b =>
                {
                    b.Navigation("transactionLogs");
                });

            modelBuilder.Entity("Domain.Entities.Security.User", b =>
                {
                    b.Navigation("points");

                    b.Navigation("rewardLogs");

                    b.Navigation("transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
